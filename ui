<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MHDDoS - Professional Network Testing Suite</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0c0c0c 0%, #1a1a1a 100%);
            color: #ffffff;
            overflow-x: hidden;
            min-height: 100vh;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            padding: 30px 0;
            background: linear-gradient(45deg, #ff4757, #ff6b7d);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            text-shadow: 0 0 20px rgba(255, 71, 87, 0.3);
        }

        .header p {
            font-size: 1.2rem;
            margin-top: 10px;
            color: #888;
        }

        .main-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 30px;
        }

        .card {
            background: rgba(26, 26, 26, 0.8);
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.7);
        }

        .card h3 {
            color: #ff4757;
            font-size: 1.5rem;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            color: #cccccc;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 12px 15px;
            background: rgba(40, 40, 40, 0.8);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            color: #ffffff;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: #ff4757;
            box-shadow: 0 0 10px rgba(255, 71, 87, 0.3);
        }

        select.form-control {
            cursor: pointer;
        }

        .btn {
            padding: 12px 25px;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .btn-primary {
            background: linear-gradient(45deg, #ff4757, #ff6b7d);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(45deg, #ff3742, #ff5a6b);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(255, 71, 87, 0.4);
        }

        .btn-success {
            background: linear-gradient(45deg, #2ed573, #7bed9f);
            color: white;
        }

        .btn-success:hover {
            background: linear-gradient(45deg, #26c863, #6bcf87);
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(46, 213, 115, 0.4);
        }

        .btn-danger {
            background: linear-gradient(45deg, #ff4757, #ff3838);
            color: white;
        }

        .btn-warning {
            background: linear-gradient(45deg, #ffa502, #ffb42e);
            color: white;
        }

        .method-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }

        .method-btn {
            padding: 8px 12px;
            background: rgba(40, 40, 40, 0.8);
            border: 2px solid rgba(255, 255, 255, 0.1);
            border-radius: 6px;
            color: #cccccc;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
            font-size: 12px;
            font-weight: 600;
        }

        .method-btn:hover {
            border-color: #ff4757;
            color: #ff4757;
        }

        .method-btn.active {
            background: #ff4757;
            border-color: #ff4757;
            color: white;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 15px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(26, 26, 26, 0.9);
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #ff4757;
        }

        .stat-label {
            color: #888;
            font-size: 0.9rem;
            margin-top: 5px;
        }

        .console {
            background: #000000;
            border-radius: 10px;
            padding: 20px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            height: 300px;
            overflow-y: auto;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.8);
        }

        .console-line {
            margin: 5px 0;
            animation: fadeIn 0.3s ease;
        }

        .console-line.info {
            color: #00ff00;
        }

        .console-line.warning {
            color: #ffaa00;
        }

        .console-line.error {
            color: #ff4757;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
            overflow: hidden;
            margin: 10px 0;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff4757, #ff6b7d);
            width: 0%;
            transition: width 0.3s ease;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .tab {
            padding: 12px 20px;
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .tab.active {
            color: #ff4757;
            border-bottom: 2px solid #ff4757;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .control-buttons {
            display: flex;
            gap: 15px;
            justify-content: center;
            margin-top: 20px;
        }

        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #ff4757;
            animation: spin 1s ease-in-out infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .icon {
            width: 20px;
            height: 20px;
            fill: currentColor;
        }

        @media (max-width: 768px) {
            .main-grid {
                grid-template-columns: 1fr;
            }
            
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .header h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>MHDDoS Professional</h1>
            <p>Advanced Network Testing & Security Analysis Suite</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-value" id="requests-sent">0</div>
                <div class="stat-label">Requests Sent</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="bytes-sent">0 B</div>
                <div class="stat-label">Data Transferred</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="threads-count">0</div>
                <div class="stat-label">Active Threads</div>
            </div>
            <div class="stat-card">
                <div class="stat-value" id="attack-time">0s</div>
                <div class="stat-label">Runtime</div>
            </div>
        </div>

        <div class="main-grid">
            <div class="card">
                <h3>
                    <svg class="icon" viewBox="0 0 24 24">
                        <path d="M12 2L2 7V10C2 16 6 20.5 12 22C18 20.5 22 16 22 10V7L12 2Z"/>
                    </svg>
                    Attack Configuration
                </h3>

                <div class="tabs">
                    <button class="tab active" onclick="showTab('layer7')">Layer 7</button>
                    <button class="tab" onclick="showTab('layer4')">Layer 4</button>
                    <button class="tab" onclick="showTab('tools')">Tools</button>
                </div>

                <div class="tab-content active" id="layer7">
                    <div class="form-group">
                        <label>Target URL</label>
                        <input type="text" class="form-control" id="target-url" placeholder="https://example.com">
                    </div>

                    <div class="form-group">
                        <label>Layer 7 Methods</label>
                        <div class="method-grid">
                            <div class="method-btn" onclick="selectMethod(this, 'GET')">GET</div>
                            <div class="method-btn" onclick="selectMethod(this, 'POST')">POST</div>
                            <div class="method-btn" onclick="selectMethod(this, 'CFB')">CFB</div>
                            <div class="method-btn" onclick="selectMethod(this, 'BYPASS')">BYPASS</div>
                            <div class="method-btn" onclick="selectMethod(this, 'OVH')">OVH</div>
                            <div class="method-btn" onclick="selectMethod(this, 'STRESS')">STRESS</div>
                            <div class="method-btn" onclick="selectMethod(this, 'DYN')">DYN</div>
                            <div class="method-btn" onclick="selectMethod(this, 'SLOW')">SLOW</div>
                            <div class="method-btn" onclick="selectMethod(this, 'HEAD')">HEAD</div>
                            <div class="method-btn" onclick="selectMethod(this, 'NULL')">NULL</div>
                            <div class="method-btn" onclick="selectMethod(this, 'COOKIE')">COOKIE</div>
                            <div class="method-btn" onclick="selectMethod(this, 'APACHE')">APACHE</div>
                            <div class="method-btn" onclick="selectMethod(this, 'XMLRPC')">XMLRPC</div>
                            <div class="method-btn" onclick="selectMethod(this, 'BOT')">BOT</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Proxy Type</label>
                        <select class="form-control" id="proxy-type">
                            <option value="0">All Types</option>
                            <option value="1">HTTP</option>
                            <option value="4">SOCKS4</option>
                            <option value="5">SOCKS5</option>
                            <option value="6">Random</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Requests Per Connection</label>
                        <input type="number" class="form-control" id="rpc" value="1" min="1" max="100">
                    </div>
                </div>

                <div class="tab-content" id="layer4">
                    <div class="form-group">
                        <label>Target IP:Port</label>
                        <input type="text" class="form-control" id="target-ip" placeholder="127.0.0.1:80">
                    </div>

                    <div class="form-group">
                        <label>Layer 4 Methods</label>
                        <div class="method-grid">
                            <div class="method-btn" onclick="selectMethod(this, 'TCP')">TCP</div>
                            <div class="method-btn" onclick="selectMethod(this, 'UDP')">UDP</div>
                            <div class="method-btn" onclick="selectMethod(this, 'SYN')">SYN</div>
                            <div class="method-btn" onclick="selectMethod(this, 'VSE')">VSE</div>
                            <div class="method-btn" onclick="selectMethod(this, 'MINECRAFT')">MINECRAFT</div>
                            <div class="method-btn" onclick="selectMethod(this, 'CPS')">CPS</div>
                            <div class="method-btn" onclick="selectMethod(this, 'FIVEM')">FIVEM</div>
                            <div class="method-btn" onclick="selectMethod(this, 'TS3')">TS3</div>
                            <div class="method-btn" onclick="selectMethod(this, 'MCPE')">MCPE</div>
                            <div class="method-btn" onclick="selectMethod(this, 'ICMP')">ICMP</div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Amplification Methods</label>
                        <div class="method-grid">
                            <div class="method-btn" onclick="selectMethod(this, 'MEM')">MEM</div>
                            <div class="method-btn" onclick="selectMethod(this, 'NTP')">NTP</div>
                            <div class="method-btn" onclick="selectMethod(this, 'DNS')">DNS</div>
                            <div class="method-btn" onclick="selectMethod(this, 'CLDAP')">CLDAP</div>
                            <div class="method-btn" onclick="selectMethod(this, 'CHAR')">CHAR</div>
                            <div class="method-btn" onclick="selectMethod(this, 'RDP')">RDP</div>
                        </div>
                    </div>
                </div>

                <div class="tab-content" id="tools">
                    <div class="form-group">
                        <label>Tools</label>
                        <div class="method-grid">
                            <div class="method-btn" onclick="selectMethod(this, 'PING')">PING</div>
                            <div class="method-btn" onclick="selectMethod(this, 'CHECK')">CHECK</div>
                            <div class="method-btn" onclick="selectMethod(this, 'INFO')">INFO</div>
                            <div class="method-btn" onclick="selectMethod(this, 'DNS')">DNS</div>
                            <div class="method-btn" onclick="selectMethod(this, 'DSTAT')">DSTAT</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card">
                <h3>
                    <svg class="icon" viewBox="0 0 24 24">
                        <path d="M19 3H5C3.9 3 3 3.9 3 5V19C3 20.1 3.9 21 5 21H19C20.1 21 21 20.1 21 19V5C21 3.9 20.1 3 19 3ZM12 17H7V15H12V17ZM17 13H7V11H17V13ZM17 9H7V7H17V9Z"/>
                    </svg>
                    Advanced Settings
                </h3>

                <div class="form-group">
                    <label>Threads</label>
                    <input type="number" class="form-control" id="threads" value="500" min="1" max="2000">
                </div>

                <div class="form-group">
                    <label>Duration (seconds)</label>
                    <input type="number" class="form-control" id="duration" value="60" min="1">
                </div>

                <div class="form-group">
                    <label>Proxy List</label>
                    <input type="text" class="form-control" id="proxy-list" value="proxies.txt" placeholder="proxy-file.txt">
                </div>

                <div class="form-group">
                    <label>User Agents</label>
                    <select class="form-control" id="user-agents">
                        <option value="random">Random</option>
                        <option value="chrome">Chrome</option>
                        <option value="firefox">Firefox</option>
                        <option value="safari">Safari</option>
                        <option value="mobile">Mobile</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Debug Mode</label>
                    <select class="form-control" id="debug-mode">
                        <option value="false">Disabled</option>
                        <option value="true">Enabled</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="card">
            <h3>
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M2 3H22C23.1 3 24 3.9 24 5V19C24 20.1 23.1 21 22 21H2C0.9 21 0 20.1 0 19V5C0 3.9 0.9 3 2 3ZM22 19V5H2V19H22ZM4 17V15H8V17H4ZM10 17V15H20V17H10ZM4 13V11H6V13H4ZM8 13V11H20V13H8ZM4 9V7H6V9H4ZM8 9V7H20V9H8Z"/>
                </svg>
                Console Output
            </h3>
            
            <div class="progress-bar">
                <div class="progress-fill" id="progress"></div>
            </div>
            
            <div class="console" id="console">
                <div class="console-line info">[INFO] MHDDoS Professional v2.4 Ready</div>
                <div class="console-line info">[INFO] Select your attack parameters and click Start Attack</div>
                <div class="console-line warning">[WARNING] Use this tool responsibly for authorized testing only</div>
            </div>
        </div>

        <div class="control-buttons">
            <button class="btn btn-success" id="start-btn" onclick="startAttack()">
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M8 5V19L19 12L8 5Z"/>
                </svg>
                Start Attack
            </button>
            <button class="btn btn-danger" id="stop-btn" onclick="stopAttack()" disabled>
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M6 6H18V18H6V6Z"/>
                </svg>
                Stop Attack
            </button>
            <button class="btn btn-warning" onclick="clearConsole()">
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z"/>
                </svg>
                Clear
            </button>
            <button class="btn btn-primary" onclick="exportConfig()">
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M14 2H6C4.89 2 4 2.9 4 4V20C4 21.11 4.89 22 6 22H18C19.11 22 20 21.11 20 20V8L14 2ZM18 20H6V4H13V9H18V20Z"/>
                </svg>
                Export Config
            </button>
        </div>
    </div>

    <script>
        let attackRunning = false;
        let attackInterval;
        let selectedMethod = 'GET';
        let startTime;
        let stats = {
            requests: 0,
            bytes: 0,
            threads: 0,
            runtime: 0
        };

        function showTab(tabName) {
            // Remove active class from all tabs and contents
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            // Add active class to selected tab and content
            event.target.classList.add('active');
            document.getElementById(tabName).classList.add('active');
        }

        function selectMethod(element, method) {
            // Remove active class from all method buttons
            document.querySelectorAll('.method-btn').forEach(btn => btn.classList.remove('active'));
            
            // Add active class to selected method
            element.classList.add('active');
            selectedMethod = method;
            
            addConsoleMessage(`[INFO] Selected method: ${method}`, 'info');
        }

        function addConsoleMessage(message, type = 'info') {
            const console = document.getElementById('console');
            const line = document.createElement('div');
            line.className = `console-line ${type}`;
            line.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
            console.appendChild(line);
            console.scrollTop = console.scrollHeight;
        }

        function clearConsole() {
            const console = document.getElementById('console');
            console.innerHTML = '<div class="console-line info">[INFO] Console cleared</div>';
        }

        function updateStats() {
            if (!attackRunning) return;
            
            stats.requests += Math.floor(Math.random() * 100) + 50;
            stats.bytes += Math.floor(Math.random() * 10000) + 5000;
            stats.threads = parseInt(document.getElementById('threads').value);
            stats.runtime = Math.floor((Date.now() - startTime) / 1000);

            document.getElementById('requests-sent').textContent = stats.requests.toLocaleString();
            document.getElementById('bytes-sent').textContent = formatBytes(stats.bytes);
            document.getElementById('threads-count').textContent = stats.threads;
            document.getElementById('attack-time').textContent = stats.runtime + 's';

            // Update progress bar
            const duration = parseInt(document.getElementById('duration').value);
            const progress = (stats.runtime / duration) * 100;
            document.getElementById('progress').style.width = Math.min(progress, 100) + '%';

            // Add random console messages
            if (Math.random() < 0.3) {
                const messages = [
                    `[INFO] Sent ${stats.requests} requests to target`,
                    `[INFO] ${stats.threads} threads active`,
                    `[INFO] Data transferred: ${formatBytes(stats.bytes)}`,
                    `[WARNING] High traffic detected on target`,
                    `[INFO] Attack method: ${selectedMethod} running smoothly`
                ];
                addConsoleMessage(messages[Math.floor(Math.random() * messages.length)]);
            }
        }

        function formatBytes(bytes) {
            const sizes = ['B', 'KB', 'MB', 'GB'];
            if (bytes === 0) return '0 B';
            const i = Math.floor(Math.log(bytes) / Math.log(1024));
            return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
        }

        function validateInput() {
            const targetUrl = document.getElementById('target-url').value;
            const targetIp = document.getElementById('target-ip').value;
            const activeTab = document.querySelector('.tab-content.active').id;
            
            if (activeTab === 'layer7' && !targetUrl) {
                addConsoleMessage('[ERROR] Please enter a target URL', 'error');
                return false;
            }
            
            if (activeTab === 'layer4' && !targetIp) {
                addConsoleMessage('[ERROR] Please enter target IP:Port', 'error');
                return false;
            }
            
            if (!selectedMethod) {
                addConsoleMessage('[ERROR] Please select an attack method', 'error');
                return false;
            }
            
            return true;
        }

        function startAttack() {
            if (!validateInput()) return;
            
            attackRunning = true;
            startTime = Date.now();
            
            document.getElementById('start-btn').disabled = true;
            document.getElementById('start-btn').innerHTML = '<div class="spinner"></div>Running...';
            document.getElementById('stop-btn').disabled = false;
            
            const target = document.getElementById('target-url').value || document.getElementById('target-ip').value;
            const threads = document.getElementById('threads').value;
            const duration = document.getElementById('duration').value;
            
            addConsoleMessage(`[INFO] Starting attack on ${target}`, 'info');
            addConsoleMessage(`[INFO] Method: ${selectedMethod}, Threads: ${threads}, Duration: ${duration}s`, 'info');
            addConsoleMessage(`[WARNING] Attack initiated - Monitor responsibly!`, 'warning');
            
            // Simulate attack progress
            attackInterval = setInterval(updateStats, 1000);
            
            // Auto-stop after duration
            setTimeout(() => {
                if (attackRunning) stopAttack();
            }, parseInt(duration) * 1000);
        }

        function stopAttack() {
            attackRunning = false;
            clearInterval(attackInterval);
            
            document.getElementById('start-btn').disabled = false;
            document.getElementById('start-btn').innerHTML = `
                <svg class="icon" viewBox="0 0 24 24">
                    <path d="M8 5V19L19 12L8 5Z"/>
                </svg>
                Start Attack
            `;
            document.getElementById('stop-btn').disabled = true;
            
            addConsoleMessage('[INFO] Attack stopped', 'info');
            addConsoleMessage(`[INFO] Final stats - Requests: ${stats.requests.toLocaleString()}, Data: ${formatBytes(stats.bytes)}`, 'info');
        }

        function exportConfig() {
            const config = {
                method: selectedMethod,
                targetUrl: document.getElementById('target-url').value,
                targetIp: document.getElementById('target-ip').value,
                threads: document.getElementById('threads').value,
                duration: document.getElementById('duration').value,
                proxyType: document.getElementById('proxy-type').value,
                proxyList: document.getElementById('proxy-list').value,
                rpc: document.getElementById('rpc').value,
                userAgents: document.getElementById('user-agents').value,
                debugMode: document.getElementById('debug-mode').value
            };
            
            const dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(config, null, 2));
            const downloadAnchorNode = document.createElement('a');
            downloadAnchorNode.setAttribute("href", dataStr);
            downloadAnchorNode.setAttribute("download", "mhddos-config.json");
            document.body.appendChild(downloadAnchorNode);
            downloadAnchorNode.click();
            downloadAnchorNode.remove();
            
            addConsoleMessage('[INFO] Configuration exported successfully', 'info');
        }

        // Initialize with GET method selected
        document.addEventListener('DOMContentLoaded', function() {
            const firstMethodBtn = document.querySelector('.method-btn');
            if (firstMethodBtn) {
                firstMethodBtn.classList.add('active');
            }
        });

        // Add some visual effects and animations
        document.querySelectorAll('.method-btn').forEach(btn => {
            btn.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.05)';
            });
            
            btn.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1)';
            });
        });

        // Auto-save configuration to localStorage
        function saveConfig() {
            const config = {
                method: selectedMethod,
                targetUrl: document.getElementById('target-url').value,
                targetIp: document.getElementById('target-ip').value,
                threads: document.getElementById('threads').value,
                duration: document.getElementById('duration').value,
                proxyType: document.getElementById('proxy-type').value,
                proxyList: document.getElementById('proxy-list').value,
                rpc: document.getElementById('rpc').value,
                userAgents: document.getElementById('user-agents').value,
                debugMode: document.getElementById('debug-mode').value
            };
            localStorage.setItem('mhddos-config', JSON.stringify(config));
        }

        function loadConfig() {
            const saved = localStorage.getItem('mhddos-config');
            if (saved) {
                const config = JSON.parse(saved);
                document.getElementById('target-url').value = config.targetUrl || '';
                document.getElementById('target-ip').value = config.targetIp || '';
                document.getElementById('threads').value = config.threads || '500';
                document.getElementById('duration').value = config.duration || '60';
                document.getElementById('proxy-type').value = config.proxyType || '0';
                document.getElementById('proxy-list').value = config.proxyList || 'proxies.txt';
                document.getElementById('rpc').value = config.rpc || '1';
                document.getElementById('user-agents').value = config.userAgents || 'random';
                document.getElementById('debug-mode').value = config.debugMode || 'false';
                selectedMethod = config.method || 'GET';
            }
        }

        // Auto-save when inputs change
        document.querySelectorAll('input, select').forEach(input => {
            input.addEventListener('change', saveConfig);
        });

        // Load saved configuration on page load
        loadConfig();

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey || e.metaKey) {
                switch(e.key) {
                    case 's':
                        e.preventDefault();
                        if (attackRunning) {
                            stopAttack();
                        } else {
                            startAttack();
                        }
                        break;
                    case 'l':
                        e.preventDefault();
                        clearConsole();
                        break;
                    case 'e':
                        e.preventDefault();
                        exportConfig();
                        break;
                }
            }
        });

        // Add tooltips for better UX
        function showTooltip(element, text) {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            tooltip.textContent = text;
            tooltip.style.cssText = `
                position: absolute;
                background: rgba(0,0,0,0.9);
                color: white;
                padding: 5px 10px;
                border-radius: 4px;
                font-size: 12px;
                z-index: 1000;
                pointer-events: none;
            `;
            document.body.appendChild(tooltip);
            
            const rect = element.getBoundingClientRect();
            tooltip.style.left = rect.left + 'px';
            tooltip.style.top = (rect.top - 30) + 'px';
            
            setTimeout(() => {
                if (tooltip.parentNode) {
                    tooltip.parentNode.removeChild(tooltip);
                }
            }, 2000);
        }

        // Enhanced attack simulation with realistic patterns
        function enhancedUpdateStats() {
            if (!attackRunning) return;
            
            const methodMultipliers = {
                'GET': 1.0,
                'POST': 0.8,
                'CFB': 1.5,
                'BYPASS': 1.2,
                'UDP': 2.0,
                'TCP': 1.8,
                'SYN': 3.0
            };
            
            const multiplier = methodMultipliers[selectedMethod] || 1.0;
            const baseRequests = Math.floor(Math.random() * 50) + 25;
            const baseBytes = Math.floor(Math.random() * 5000) + 2500;
            
            stats.requests += Math.floor(baseRequests * multiplier);
            stats.bytes += Math.floor(baseBytes * multiplier);
            stats.threads = parseInt(document.getElementById('threads').value);
            stats.runtime = Math.floor((Date.now() - startTime) / 1000);

            document.getElementById('requests-sent').textContent = stats.requests.toLocaleString();
            document.getElementById('bytes-sent').textContent = formatBytes(stats.bytes);
            document.getElementById('threads-count').textContent = stats.threads;
            document.getElementById('attack-time').textContent = stats.runtime + 's';

            const duration = parseInt(document.getElementById('duration').value);
            const progress = (stats.runtime / duration) * 100;
            document.getElementById('progress').style.width = Math.min(progress, 100) + '%';

            // More realistic console messages
            const messagePool = [
                `[INFO] ${selectedMethod} flood: ${baseRequests * multiplier | 0} req/s`,
                `[INFO] Target response time: ${Math.floor(Math.random() * 500) + 100}ms`,
                `[INFO] Proxy rotation: ${Math.floor(Math.random() * 20) + 5} proxies active`,
                `[WARNING] Rate limiting detected, adjusting strategy`,
                `[INFO] Connection pool: ${stats.threads} concurrent connections`,
                `[INFO] Bandwidth utilization: ${Math.floor(Math.random() * 40) + 60}%`
            ];

            if (Math.random() < 0.4) {
                const message = messagePool[Math.floor(Math.random() * messagePool.length)];
                addConsoleMessage(message, Math.random() < 0.2 ? 'warning' : 'info');
            }
        }

        // Network analysis tools
        function analyzeTarget() {
            const target = document.getElementById('target-url').value || document.getElementById('target-ip').value;
            if (!target) {
                addConsoleMessage('[ERROR] No target specified', 'error');
                return;
            }
            
            addConsoleMessage(`[INFO] Analyzing target: ${target}`, 'info');
            addConsoleMessage('[INFO] Performing DNS resolution...', 'info');
            
            setTimeout(() => {
                addConsoleMessage(`[INFO] Target IP: ${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}.${Math.floor(Math.random() * 255)}`, 'info');
                addConsoleMessage('[INFO] Checking server headers...', 'info');
                
                setTimeout(() => {
                    const servers = ['nginx', 'apache', 'cloudflare', 'aws-elb'];
                    const server = servers[Math.floor(Math.random() * servers.length)];
                    addConsoleMessage(`[INFO] Server: ${server}`, 'info');
                    addConsoleMessage('[INFO] Target analysis complete', 'info');
                }, 1000);
            }, 1500);
        }

        // Add network analysis button
        const analysisBtn = document.createElement('button');
        analysisBtn.className = 'btn btn-primary';
        analysisBtn.innerHTML = `
            <svg class="icon" viewBox="0 0 24 24">
                <path d="M12 2C6.48 2 2 6.48 2 12S6.48 22 12 22 22 17.52 22 12 17.52 2 12 2ZM13 17H11V15H13V17ZM13 13H11V7H13V13Z"/>
            </svg>
            Analyze Target
        `;
        analysisBtn.onclick = analyzeTarget;
        
        document.querySelector('.control-buttons').appendChild(analysisBtn);
    </script>
</body>
</html>
